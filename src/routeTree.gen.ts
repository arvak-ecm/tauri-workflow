/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsTypographyImport } from './routes/settings/typography'
import { Route as SettingsThemesImport } from './routes/settings/themes'
import { Route as SettingsSidebarImport } from './routes/settings/sidebar'
import { Route as SettingsOthersImport } from './routes/settings/others'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsTypographyRoute = SettingsTypographyImport.update({
  id: '/typography',
  path: '/typography',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsThemesRoute = SettingsThemesImport.update({
  id: '/themes',
  path: '/themes',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsSidebarRoute = SettingsSidebarImport.update({
  id: '/sidebar',
  path: '/sidebar',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsOthersRoute = SettingsOthersImport.update({
  id: '/others',
  path: '/others',
  getParentRoute: () => SettingsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/settings/others': {
      id: '/settings/others'
      path: '/others'
      fullPath: '/settings/others'
      preLoaderRoute: typeof SettingsOthersImport
      parentRoute: typeof SettingsImport
    }
    '/settings/sidebar': {
      id: '/settings/sidebar'
      path: '/sidebar'
      fullPath: '/settings/sidebar'
      preLoaderRoute: typeof SettingsSidebarImport
      parentRoute: typeof SettingsImport
    }
    '/settings/themes': {
      id: '/settings/themes'
      path: '/themes'
      fullPath: '/settings/themes'
      preLoaderRoute: typeof SettingsThemesImport
      parentRoute: typeof SettingsImport
    }
    '/settings/typography': {
      id: '/settings/typography'
      path: '/typography'
      fullPath: '/settings/typography'
      preLoaderRoute: typeof SettingsTypographyImport
      parentRoute: typeof SettingsImport
    }
  }
}

// Create and export the route tree

interface SettingsRouteChildren {
  SettingsOthersRoute: typeof SettingsOthersRoute
  SettingsSidebarRoute: typeof SettingsSidebarRoute
  SettingsThemesRoute: typeof SettingsThemesRoute
  SettingsTypographyRoute: typeof SettingsTypographyRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsOthersRoute: SettingsOthersRoute,
  SettingsSidebarRoute: SettingsSidebarRoute,
  SettingsThemesRoute: SettingsThemesRoute,
  SettingsTypographyRoute: SettingsTypographyRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/settings/others': typeof SettingsOthersRoute
  '/settings/sidebar': typeof SettingsSidebarRoute
  '/settings/themes': typeof SettingsThemesRoute
  '/settings/typography': typeof SettingsTypographyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/settings/others': typeof SettingsOthersRoute
  '/settings/sidebar': typeof SettingsSidebarRoute
  '/settings/themes': typeof SettingsThemesRoute
  '/settings/typography': typeof SettingsTypographyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/settings/others': typeof SettingsOthersRoute
  '/settings/sidebar': typeof SettingsSidebarRoute
  '/settings/themes': typeof SettingsThemesRoute
  '/settings/typography': typeof SettingsTypographyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/settings/others'
    | '/settings/sidebar'
    | '/settings/themes'
    | '/settings/typography'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/settings/others'
    | '/settings/sidebar'
    | '/settings/themes'
    | '/settings/typography'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/settings/others'
    | '/settings/sidebar'
    | '/settings/themes'
    | '/settings/typography'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx",
      "children": [
        "/settings/others",
        "/settings/sidebar",
        "/settings/themes",
        "/settings/typography"
      ]
    },
    "/settings/others": {
      "filePath": "settings/others.tsx",
      "parent": "/settings"
    },
    "/settings/sidebar": {
      "filePath": "settings/sidebar.tsx",
      "parent": "/settings"
    },
    "/settings/themes": {
      "filePath": "settings/themes.tsx",
      "parent": "/settings"
    },
    "/settings/typography": {
      "filePath": "settings/typography.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
